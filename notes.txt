// DSA Love Babbar Sheet

-- Linked List
1. Reverse a Linked List in group of Given Size. [Very Imp] - Completed
2. Remove Duplicates in a Un-sorted Linked List. - Completed
3. Merge Sort For Linked lists.[Very Important] - Completed
4. Quicksort for Linked Lists.[Very Important] 
5. Split a Circular linked list into two halves. (gfg -> another concept) - Completed
6. Clone a linked list with next and random pointer in O(1) space and O(N) time - Completed
7. Delete nodes which have a greater value on right side
8. Segregate even and odd nodes in a Linked List


-- Stacks
1. Reverse a string using stack - GFG (another concept)
2. Merge Intervals



// Video 

-- Stacks
1. Minimum Cost To Make String Valid - Direct Formulae and conditions (Lecture 55)
2. Largest Area In Histogram - (Lecture 56) -> Hint: Use next and previous smaller element in O(n) using Stack.
3. Celebrity Problem - (Lecture 57)
4. Maximum Rectange in Binary Matrix - (Lecture 57) -> Hint: Use largest area in histogram
5. N Stacks in an Array - (Lecture 58)
6. Special Stack Problem - getMin() function in O(1) time and O(1) space - (Lecture 59) - Direct Formulae and concept of recovering


-- Queue
1. Find negative integer in every window of size k
2. First non-repeating character in a stream
3. Circular Tour - Petro Distance Problem
4. Implement Stack using Queue
5. Implement Queue using Stack
6. N Queue in An Array
7. Sum of minimum and maximum elements of all subarrays of size k -> Can be used in CP
8. Interleve first half of the queue with the second half using stacks only


-- Binary Tree
1. Zig-Zag/Spiral Traversal
2. Vertical Order Traversal
3. Diagonal Order Traversal -> Nice queue concept(https://www.youtube.com/watch?v=LhXPvhrhcIk)
4. Build tree from inorder and preorder traversal.
5. Build tree from inorder and postorder traversal.
6. Minimum time to burn a tree
7. Morris Traversal (all three traversal) -> I find it hard but easy approach, do this again
	Steps of Morris Traversal (Inorder):
	a. if the left pointer is NULL the print the current node and move current node to the right.
	b. else find the predecessor of a current node and if right pointer of predecessor is NULL then connect predecessor to the current            node using right pointer then move current to the 	           left side and if the right pointer of predecessor is again            pointing to the current node then put predecessor -> right = NULL and print the current node and move the current node 	               to the right side. 	
8. Flatten a binary tree into linked list -> Hint: Morris Traversal
9. Lowest Common Ancestor of Binary Tree


-- Binary Search Tree
1. Lowest Common Ancestor of BST (easier approach in BST).
2. Normal BST to Balanced BST.
3. Delete a node in BST. -> One imp edge case.
4. Create BST from preorder in O(n). -> Hint: Use interval method like we used to check valid BST.


-- Heap
1. Heap Sort
2. Build Heap
3. Insertion and Deletion and heapify -> Only see the how it works
4. Kth smallest and largest element in an array.
5. Is Binary Tree Heap? -> Hint: First check if Binary tree is CBT (check if Index is within the size of binary tree), and then check heap property.
6. Convert almost complete BST to max heap -> Hint: first create the inorder vector and then replace values of bst in preorder traversal.
7. Minimum Cost Of Rope Problem -> keep merging the lowest values of index.
8. Merge k sorted arrays -> Most important. Hint: priority queue comparator and new class creation required
9. Smallest range in k sorted arrays -> Hint: priority queue comparator and new class creation required
10. Median of running stream -> Hard quest of heap, just know the process it will be easy (https://www.youtube.com/watch?v=1LkOrc-Le-Y&t=1526s)
-------------------------------------------------------- Completed -----------------------------------------------------------------------


-- Backtracking
1. N Queen Problem
2. Sudoku Solver (most important)
-------------------------------------------------------- Completed -----------------------------------------------------------------------



-- Trie
1. Implemenation



-- Graph
1. Cycle detection in undirected graph using both bfs and dfs -> Hint: Every node is visited once except its parent if cycle is not present. (Simply, check if visited array is true and the child of node is not the parent of visited node, then cycle is present)
2. Cycle detection in directed graph using dfs -> Hint: Maintain visited array and dfs array, if dfs call go back then turn dfs position to 0, if visited and dfs call are both 1 then cycle is present otherwise not.
3. Topological Sort using DFS -> Hint: Create a stack and when DFS call go back then push that element in stack, this stack is the topological sort.
4. Topological Sort using BFS (Kahn's Algo) -> Hint: use indegree vector and queue
5. Cycle detection in directed graph using bfs -> Hint: We know that topological sort only used in directed acyclic graph, so if the cycle is present then the topological sort answer is not correct (count is not correct)
6. Shortest Path In Undirected Path (with no weight) -> Hint: BFS always goes while taking shortest path.
NOTE: Everything is important

NOTE: For bridge in graph -> First see Jenny's lecture then watch another one








Tips:
1. To initialize the size of vector we can use vector<int> v(n) -> where n is the size
2. To initialize the size of vector and also the values of each index we can use vector<int> v(n,p) -> where n is the size and p is the value.
3. To create the minHeap or maxHeap with our own comparator we can write like this:

// Here it is a min heap storing pair

struct comparator{
    bool operator()(const pair<int,int> &a, const pair<int,int> &b){
        return a.second > b.second;
    }
};

priority_queue<pair<int,int>, vector<pair<int,int>>, comparator> pq;




Notes:
1. During implementation of stack using linked list -> Take top as starting of node and do insertion and deletion there only to get O(1) time.
2. For reversal of anything -> Use stack or recursion
3. For sliding window type question use queue. eg. Find negative integer in every window of size k
4. Suppose if we have to find unique element among non-unique data, then use xor.
5. To find the predecessor of node in a tree, then first go to left one time, and then keep going to right untill right!=NULL -> Used in Morris Traversal.
6. PreOrder, InOrder, PostOrder, Level Order traversal of tree takes O(N) time and O(N) space but Morris Traversal takes O(N) time but O(1) space.
7. Inorder Traversal in BST are always sorted in ascending order.
8. Inorder Predecessor node of a BST is always the maximum element present on the left side of target node tree. Similarly Inorder Successor is always the minimum element present on the right side of the target node tree.
9. To find the maximum element in the BST, always go to the right side of the BST and for minimum element always go the left side of the BST till last node.
10. Heaps are almost complete binary tree -> CBT: All levels are filled except the last level and fill is always from left to right side.
11. Leaf nodes in heap = ((size_of_heap/2)+1)th to nth node.
12. Non-leaf nodes in head = 1st to (size_of_heap/2)th node -> Used in build_heap function
13. Heapify -> Moving one node to its correct position, direction: down
14. TC of build heap is O(N) instead of O(NlogN). Find out why?
15. To find the minimum and maximum largest element at particular element, use heaps
16. Whenever we have to apply some operation in binary tree in O(n) time and O(1) space, use Morris Traversal.
17. To implement Dictionary, trie is a better option than hashmap because in hashmap every word takes space but in trie the common letter of the words do no take extra space, TC in both data structure is same but the SC of trie is better than hashmap while implementing dictionary. For eg., "TOMY" and "TOMATO", in hashmap "TOMY" and "TOMATO" takes space, but in trie "TOM" is takes common space in "TOMATO" and "TOMY" and thus trie is space optimized.
18. Path in a Graph -> Covering all the nodes without repeating the nodes.
19. Ways to Represent a Graph -> 1. Adjacency matrix 2. Adjacency List
20. For BFS traversal of graph: Queue and visited array is used.
21. For DFS traversal of graph: Stack and visited array is used.
22. Note topological sort can only be applied in Acyclic directed graph. To know reason watch video (it is easy you can also find by running cycle case in pen and paper)
23. Prim's algo and Krushkal's algo is used to find minimum spanning tree
24. When you convert a graph into a tree such that it contains n nodes and n-1 edges then the graph is called spanning tree.
25. If spanning tree contains the minimum possible weight to cover every nodes each then the graph is called minimum spanning tree.
26. In krushkal's algo, we need to use disjoint set: union() and findParent() function is used, research shows that both function have O(1) time complexity, which is true when you dry run the code using pen and paper.
27. Kosaraju's algo -> Kosaraju-Sharir's algorithm (also known as Kosaraju's algorithm) is a linear time algorithm to find the strongly connected components of a directed graph.
28. Dijkstra's algo, does not work for negative edges, that is why we use Bellman Ford algo.
29. Bellman ford algo is used to find a graph is negative or not, if it is not negative graph then it can find the shortest distance between two nodes. (negative graph are those graph in which when we move from one node to another in weighted graph, the distance becomes smaller and smaller in negative till infinite, so we cannot find the distance between two nodes in negative graph), for more info watch love babbar youtube video.